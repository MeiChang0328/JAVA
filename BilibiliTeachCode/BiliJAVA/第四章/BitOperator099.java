public class BitOperator099{
    public static void main(String[] args){
        
        /*位運算：
        & | ^ ~ >> << >>>
        1.&(按位與) 1,1=1
        2.|(案位或) 1,0=1
        3.^(按位異或) 1,0=1  1,1=0  0,0=0
        4.~(按位取反) 0->1  1->0
        */

       System.out.println(2&3);// 2
       /*
       一碼數字，4個字節 ，1字節8 Bit
       計算時要用補碼計算
       但2,3為正數，原碼反碼補碼都一樣
       2=00000000 00000000 00000000 00000010
       3=00000000 00000000 00000000 00000011
       ________&____________
        =000000000 00000000 00000000 0000010(補碼)
        看結果要看原碼，但為正數，所以補碼=原碼
        =00000000 00000000 00000000 00000010(原碼)
        =2
        */
       System.out.println(~-2);
       /*-2
       =10000000 00000000 00000000 00000010(原碼)
       =11111111 11111111 11111111 11111101(反碼)(1不變，為符號位)
       =11111111 11111111 11111111 11111110(補碼)
       ~-2(取反)
       =00000000 00000000 00000000 00000001(補碼)(最高符號位=0，正數，原碼反碼補碼都一樣)
       =00000000 00000000 00000000 00000001(原碼)
       =1
        */
      System.out.println(~2);
       /*2
       =00000000 00000000 00000000 00000010(原碼、反碼、補碼)
       ~2(取反)
       =11111111 11111111 11111111 11111101(補碼)(補碼-1=反碼)
       =11111111 11111111 11111111 11111100(反碼)
       =10000000 00000000 00000000 00000011(原始碼)
       =-3
        */

    }
}